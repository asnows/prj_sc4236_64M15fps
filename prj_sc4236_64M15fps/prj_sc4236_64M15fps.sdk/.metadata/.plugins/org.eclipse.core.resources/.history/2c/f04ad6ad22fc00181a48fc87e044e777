#include "xil_printf.h"
#include "vdma.h"

#define  VDMA0_BASE_ADDR     0x43010000
#define  VDMA_ImgCopy_BASE_ADDR     0x43020000

#define  S2MM_VDMACR_OFSET          0x30
#define  S2MM_VDMASR_OFSET          0x34
#define  S2MM_VDMA_IRQ_MASK_OFSET   0x3c
#define  S2MM_REG_INDEX_OFSET       0x44
#define  S2MM_VSIZE_OFSET           0xA0
#define  S2MM_HSIZE_OFSET           0xA4
#define  S2MM_FRMDLY_STRIDE_OFSET   0xA8
#define  S2MM_START_ADDRESS1_OFSET  0xAC
#define  S2MM_START_ADDRESS2_OFSET  0xB0
#define  S2MM_START_ADDRESS3_OFSET  0xB4

#define  MM2S_VDMACR_OFSET          0x00
#define  MM2S_VDMASR_OFSET          0x04
//#define  MM2S_VDMA_IRQ_MASK_OFSET   0x3c
#define  MM2S_REG_INDEX_OFSET       0x14
#define  MM2S_VSIZE_OFSET           0x50
#define  MM2S_HSIZE_OFSET           0x54
#define  MM2S_FRMDLY_STRIDE_OFSET   0x58
#define  MM2S_START_ADDRESS1_OFSET  0x5C
#define  MM2S_START_ADDRESS2_OFSET  0x60
#define  MM2S_START_ADDRESS3_OFSET  0x64




u32 vdma_version(XAxiVdma *Vdma) {
	return XAxiVdma_GetVersion(Vdma);
}

int vdma_read_start(XAxiVdma *Vdma) {
	int Status;

	// MM2S Startup
	Status = XAxiVdma_DmaStart(Vdma, XAXIVDMA_READ);
	if (Status != XST_SUCCESS)
	{
	   xil_printf("Start read transfer failed %d\n\r", Status);
	   return XST_FAILURE;
	}

	return XST_SUCCESS;
}


int vdma_read_stop(XAxiVdma *Vdma) {
	XAxiVdma_DmaStop(Vdma, XAXIVDMA_READ);
	return XST_SUCCESS;
}


int vdma_read_init(short DeviceID,short HoriSizeInput,short VertSizeInput,short Stride,unsigned int FrameStoreStartAddr)
{
	XAxiVdma Vdma;
	XAxiVdma_Config *Config;
	XAxiVdma_DmaSetup ReadCfg;
	int Status;


	Config = XAxiVdma_LookupConfig(DeviceID);
	if (NULL == Config) {
		xil_printf("XAxiVdma_LookupConfig failure\r\n");
		return XST_FAILURE;
	}

	Status = XAxiVdma_CfgInitialize(&Vdma, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		xil_printf("XAxiVdma_CfgInitialize failure\r\n");
		return XST_FAILURE;
	}

	

	ReadCfg.EnableCircularBuf = 1;
	ReadCfg.EnableFrameCounter = 0;
	ReadCfg.FixedFrameStoreAddr = 0;

	ReadCfg.EnableSync = 1;
	ReadCfg.PointNum = 1;

	ReadCfg.FrameDelay = 0;

	ReadCfg.VertSizeInput = VertSizeInput;
	ReadCfg.HoriSizeInput = HoriSizeInput;
	ReadCfg.Stride = Stride;

	Status = XAxiVdma_DmaConfig(&Vdma, XAXIVDMA_READ, &ReadCfg);
	if (Status != XST_SUCCESS) {
			xdbg_printf(XDBG_DEBUG_ERROR,
				"Read channel config failed %d\r\n", Status);

			return XST_FAILURE;
	}


	ReadCfg.FrameStoreStartAddr[0] = FrameStoreStartAddr;

	Status = XAxiVdma_DmaSetBufferAddr(&Vdma, XAXIVDMA_READ, ReadCfg.FrameStoreStartAddr);
	if (Status != XST_SUCCESS) {
			xdbg_printf(XDBG_DEBUG_ERROR,"Read channel set buffer address failed %d\r\n", Status);
			return XST_FAILURE;
	}


	Status = vdma_read_start(&Vdma);
	if (Status != XST_SUCCESS) {
		   xil_printf("error starting VDMA..!");
		   return Status;
	}
	return XST_SUCCESS;

}


int vdma_write_start(XAxiVdma *Vdma) {
	int Status;

	// MM2S Startup
	Status = XAxiVdma_DmaStart(Vdma, XAXIVDMA_WRITE);
	if (Status != XST_SUCCESS)
	{
	   xil_printf("Start write transfer failed %d\n\r", Status);
	   return XST_FAILURE;
	}

	return XST_SUCCESS;
}


int vdma_write_stop(XAxiVdma *Vdma) {
	XAxiVdma_DmaStop(Vdma, XAXIVDMA_WRITE);
	return XST_SUCCESS;
}


int vdma1_write_init(short DeviceID,short HoriSizeInput,short VertSizeInput,short Stride,unsigned int *FrameStoreStartAddr)
{
	XAxiVdma Vdma;
	XAxiVdma_Config *Config;
	XAxiVdma_DmaSetup WriteCfg;
	int Status;

	// 初始化vdma

	Config = XAxiVdma_LookupConfig(DeviceID);
	if (NULL == Config) {
		xil_printf("XAxiVdma_LookupConfig failure\r\n");
		return XST_FAILURE;
	}

	Status = XAxiVdma_CfgInitialize(&Vdma, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		xil_printf("XAxiVdma_CfgInitialize failure\r\n");
		return XST_FAILURE;
	}

	

	//初始化设置dma的参数
	WriteCfg.EnableCircularBuf = 1;
	WriteCfg.EnableFrameCounter = 0;
	WriteCfg.FixedFrameStoreAddr = 0;

	WriteCfg.EnableSync = 1;
	WriteCfg.PointNum = 1;

	WriteCfg.FrameDelay = 0;

	WriteCfg.VertSizeInput = VertSizeInput;
	WriteCfg.HoriSizeInput = HoriSizeInput;
	WriteCfg.Stride = Stride;

	xil_printf("VertSizeInput = %x\r\n",VertSizeInput);
	xil_printf("HoriSizeInput = %x\r\n",HoriSizeInput);
	xil_printf("Stride = %x\r\n",Stride);


	//使用上面的配置信息，配置dma通道
	Status = XAxiVdma_DmaConfig(&Vdma, XAXIVDMA_WRITE, &WriteCfg);
	if (Status != XST_SUCCESS) {
			xdbg_printf(XDBG_DEBUG_ERROR,
				"Read channel config failed %d\r\n", Status);

			return XST_FAILURE;
	}

	 int i;
	 for(i=0;i<4;i++)
    {
		 WriteCfg.FrameStoreStartAddr[i] = FrameStoreStartAddr[i];
		 xil_printf("FrameStoreStartAddr[%x] = %x\r\n",i,FrameStoreStartAddr[i]);
    }



	//将帧存储的初始地址写入到vdma
	Status = XAxiVdma_DmaSetBufferAddr(&Vdma, XAXIVDMA_WRITE, WriteCfg.FrameStoreStartAddr);
	if (Status != XST_SUCCESS) {
			xdbg_printf(XDBG_DEBUG_ERROR,"Write channel set buffer address failed %d\r\n", Status);
			return XST_FAILURE;
	}

	//开始将数据搬运到显示缓冲区

	Status = vdma_write_start(&Vdma);
	if (Status != XST_SUCCESS) {
		   xil_printf("error starting VDMA..!");
		   return Status;
	}
	return XST_SUCCESS;

}

void vdma0_write_init(void)
{


	Xil_Out32(VDMA0_BASE_ADDR+S2MM_VDMACR_OFSET,0x8b);
	//Xil_Out32(VDMA0_BASE_ADDR+S2MM_VDMASR_OFSET,0x4990);
	Xil_Out32(VDMA0_BASE_ADDR+S2MM_START_ADDRESS1_OFSET,0x17000000);
//	Xil_Out32(VDMA0_BASE_ADDR+S2MM_FRMDLY_STRIDE_OFSET,0x280);
//	Xil_Out32(VDMA0_BASE_ADDR+S2MM_HSIZE_OFSET,0x280);
//	Xil_Out32(VDMA0_BASE_ADDR+S2MM_VSIZE_OFSET,0x1E0);
	Xil_Out32(VDMA0_BASE_ADDR+S2MM_FRMDLY_STRIDE_OFSET,0xf00);
	Xil_Out32(VDMA0_BASE_ADDR+S2MM_HSIZE_OFSET,0xf00);

	Xil_Out32(VDMA0_BASE_ADDR+S2MM_VSIZE_OFSET,0x50);


}

void vdma_imgcopy_init(void)
{



	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+S2MM_VDMACR_OFSET,0x8b);
	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+S2MM_START_ADDRESS1_OFSET,0x18000000);
//	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+S2MM_START_ADDRESS2_OFSET,0x18000000);
//	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+S2MM_START_ADDRESS3_OFSET,0x18000000);

	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+S2MM_FRMDLY_STRIDE_OFSET,0x280);
	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+S2MM_HSIZE_OFSET,0x280);
	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+S2MM_VSIZE_OFSET,0x1E0);


	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+MM2S_VDMACR_OFSET,0x8b);

	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+MM2S_START_ADDRESS1_OFSET,0x17000000);
//	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+S2MM_START_ADDRESS2_OFSET,0x17000000);
//	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+S2MM_START_ADDRESS3_OFSET,0x17000000);

	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+MM2S_FRMDLY_STRIDE_OFSET,0x280);
	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+MM2S_HSIZE_OFSET,0x280);
	Xil_Out32(VDMA_ImgCopy_BASE_ADDR+MM2S_VSIZE_OFSET,0x1E0);






}
